package camran.atributos_sintetizados.Parser;
import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
parser code{:
    private ArrayList<String> finalList;
    int lineError = 0;
    int columnError = 0;
    int errors=0;
    String tokenError="";
    String expectedTokens = "";
    public ArrayList<String> getList(){
        return finalList;
    }
//Method to throw Errors
        public void report_error(String message, Object info) { 
                if (info instanceof String){
        	        Symbol s = cur_token;
	                errors++;       
                        if(message.equalsIgnoreCase(".")){
                                message = "Se esperaba alguna forma como "+expectedTokens;
                        }
                        System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
                }
                else {
    	                StringBuffer m = new StringBuffer("Error ");
    	                if (info instanceof java_cup.runtime.Symbol) 
     	                        m.append( "("+info.toString()+")" );     
    	                        m.append(" : "+message);   
    	                System.err.println(m);
    }
}

public void report_error_final(String message, Object info){
    if (info instanceof String){
	Symbol s = cur_token;
	errors++;       
        
        if(message.equalsIgnoreCase(".")){
                message = "Se esperaba alguna forma como "+expectedTokens;
        }
        System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
}

    @Override   
        public void syntax_error(Symbol symbol){
            int line = symbol.left;
	        int column = symbol.right;
	        String token = (String) cur_token.value;        
            tokenError = token;
            lineError = line;
            columnError = column;
            expectedTokens = "";
            for(int index=0; index<expected_token_ids().size() ; index++){
                //We traduce the token to a form that the user might understand
                expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
				expectedTokens += ", ";
            }
        }

    @Override
        public void unrecovered_syntax_error(Symbol symbol){
            report_error_final(".","Error Sintactico");
        }
    
:}

terminal MULT, ADD, NUMBER, ID, OPEN_PARENTHESIS, CLOSE_PARENTHESIS;

non terminal ArrayList<String> e, t, ep, f, tp;

start with e;

e ::= t:item1 ep:item2 {:ArrayList<String> lista1 = item1;
                ArrayList<String> lista2 = item2;
                for(int index=0; index<lista2.size(); index++){
                    lista1.add(lista2.get(index));
                }
                finalList = lista1;
                :}
    ;

ep ::= ADD t:item1 ep:item2 {:
                System.out.print(" + ");
                ArrayList<String> lista1 = item1;
                ArrayList<String> lista2 = item2;
                lista1.add("+");
                for(int index=0; index<lista2.size(); index++){
                    lista1.add(lista2.get(index));
                }
                
                RESULT = lista1;
                :}
    | /*lambda*/ {:ArrayList<String> lista = new ArrayList();
                RESULT = lista;
    :}
    ;

t ::= f:item1 tp:item2 {:
        ArrayList<String> lista1 = item1;
                ArrayList<String> lista2 = item2;
                for(int index=0; index<lista2.size(); index++){
                    lista1.add(lista2.get(index));
                }
                RESULT = lista1;
    :}
    ;

tp ::= MULT f:item1 tp:item2 {:
                System.out.print(" * ");
                ArrayList<String> lista1 = item1;
                ArrayList<String> lista2 = item2;
                lista1.add("*");
                for(int index=0; index<lista2.size(); index++){
                    lista1.add(lista2.get(index));
                }
                
                RESULT = lista1;
                :}
    | /*lambda*/ {:ArrayList<String> lista = new ArrayList(); 
                RESULT = lista;:}
    ;

f ::= ID:id {:
            System.out.print(Integer.parseInt(id.toString())+" ");
            ArrayList<String> items = new ArrayList();
            items.add(id.toString());
            
            RESULT = items;
            :}
    | NUMBER:id {:
                System.out.print(id.toString()+" ");
                ArrayList<String> items = new ArrayList();
                items.add(id.toString());
                
                RESULT = items;
                :}
    | OPEN_PARENTHESIS e:f CLOSE_PARENTHESIS {:RESULT = f;:}
    ;





