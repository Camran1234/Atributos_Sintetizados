
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package camran.atributos_sintetizados.Parser;

import java_cup.runtime.XMLElement;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\004\000\002\004" +
    "\005\000\002\004\002\000\002\003\004\000\002\006\005" +
    "\000\002\006\002\000\002\005\003\000\002\005\003\000" +
    "\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\010\006\006\007\004\010\007\001\002\000" +
    "\012\002\ufffa\004\ufffa\005\ufffa\011\ufffa\001\002\000\010" +
    "\002\ufffe\005\022\011\ufffe\001\002\000\012\002\ufff9\004" +
    "\ufff9\005\ufff9\011\ufff9\001\002\000\010\006\006\007\004" +
    "\010\007\001\002\000\012\002\ufffb\004\013\005\ufffb\011" +
    "\ufffb\001\002\000\004\002\012\001\002\000\004\002\001" +
    "\001\002\000\010\006\006\007\004\010\007\001\002\000" +
    "\010\002\ufffd\005\ufffd\011\ufffd\001\002\000\012\002\ufffb" +
    "\004\013\005\ufffb\011\ufffb\001\002\000\010\002\ufffc\005" +
    "\ufffc\011\ufffc\001\002\000\004\011\020\001\002\000\012" +
    "\002\ufff8\004\ufff8\005\ufff8\011\ufff8\001\002\000\006\002" +
    "\000\011\000\001\002\000\010\006\006\007\004\010\007" +
    "\001\002\000\010\002\ufffe\005\022\011\ufffe\001\002\000" +
    "\006\002\uffff\011\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\010\002\010\003\004\005\007\001\001\000" +
    "\002\001\001\000\004\004\020\001\001\000\002\001\001" +
    "\000\010\002\016\003\004\005\007\001\001\000\004\006" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\014\001\001\000\002\001\001\000\004\006\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\022\005\007\001\001\000" +
    "\004\004\023\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ArrayList<String> finalList;
    int lineError = 0;
    int columnError = 0;
    int errors=0;
    String tokenError="";
    String expectedTokens = "";
    public ArrayList<String> getList(){
        return finalList;
    }
//Method to throw Errors
        public void report_error(String message, Object info) { 
                if (info instanceof String){
        	        Symbol s = cur_token;
	                errors++;       
                        if(message.equalsIgnoreCase(".")){
                                message = "Se esperaba alguna forma como "+expectedTokens;
                        }
                        System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
                }
                else {
    	                StringBuffer m = new StringBuffer("Error ");
    	                if (info instanceof java_cup.runtime.Symbol) 
     	                        m.append( "("+info.toString()+")" );     
    	                        m.append(" : "+message);   
    	                System.err.println(m);
    }
}

public void report_error_final(String message, Object info){
    if (info instanceof String){
	Symbol s = cur_token;
	errors++;       
        
        if(message.equalsIgnoreCase(".")){
                message = "Se esperaba alguna forma como "+expectedTokens;
        }
        System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
}

    @Override   
        public void syntax_error(Symbol symbol){
            int line = symbol.left;
	        int column = symbol.right;
	        String token = (String) cur_token.value;        
            tokenError = token;
            lineError = line;
            columnError = column;
            expectedTokens = "";
            for(int index=0; index<expected_token_ids().size() ; index++){
                //We traduce the token to a form that the user might understand
                expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
				expectedTokens += ", ";
            }
        }

    @Override
        public void unrecovered_syntax_error(Symbol symbol){
            report_error_final(".","Error Sintactico");
        }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= e EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> start_val = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // e ::= t ep 
            {
              ArrayList<String> RESULT =null;
		int item1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int item1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> item1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int item2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int item2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> item2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> lista1 = item1;
                ArrayList<String> lista2 = item2;
                for(int index=0; index<lista2.size(); index++){
                    lista1.add(lista2.get(index));
                }
                finalList = lista1;
                RESULT = lista1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ep ::= ADD t ep 
            {
              ArrayList<String> RESULT =null;
		int item1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int item1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> item1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int item2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int item2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> item2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.print(" + ");
                ArrayList<String> lista1 = item1;
                ArrayList<String> lista2 = item2;
                lista1.add("+");
                for(int index=0; index<lista2.size(); index++){
                    lista1.add(lista2.get(index));
                }
                
                RESULT = lista1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ep",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ep ::= 
            {
              ArrayList<String> RESULT =null;
		ArrayList<String> lista = new ArrayList();
                RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ep",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // t ::= f tp 
            {
              ArrayList<String> RESULT =null;
		int item1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int item1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> item1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int item2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int item2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> item2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<String> lista1 = item1;
                ArrayList<String> lista2 = item2;
                for(int index=0; index<lista2.size(); index++){
                    lista1.add(lista2.get(index));
                }
                RESULT = lista1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tp ::= MULT f tp 
            {
              ArrayList<String> RESULT =null;
		int item1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int item1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> item1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int item2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int item2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> item2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.print(" * ");
                ArrayList<String> lista1 = item1;
                ArrayList<String> lista2 = item2;
                lista1.add("*");
                for(int index=0; index<lista2.size(); index++){
                    lista1.add(lista2.get(index));
                }
                
                RESULT = lista1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tp ::= 
            {
              ArrayList<String> RESULT =null;
		ArrayList<String> lista = new ArrayList(); 
                RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // f ::= ID 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            System.out.print(id.toString()+" ");
            ArrayList<String> items = new ArrayList();
            items.add(id.toString());
            
            RESULT = items;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // f ::= NUMBER 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.print(id.toString()+" ");
                ArrayList<String> items = new ArrayList();
                items.add(id.toString());
                
                RESULT = items;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // f ::= OPEN_PARENTHESIS e CLOSE_PARENTHESIS 
            {
              ArrayList<String> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> f = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
